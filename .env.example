# This is an example environment file.
# Copy this file to a new file named ".env" and fill in your specific values.
# Do NOT commit your actual .env file with real secrets to version control.

# -------------------------------------
# -- APPLICATION CORE CONFIGURATION --
# -------------------------------------
# The environment your application is running in (development, production, test)
NODE_ENV=development

# The port the backend server will listen on
PORT=4000

# The publicly accessible URL for your backend.
# For local development with GitHub webhooks, you'll need a tunnel service like ngrok.
# Example: PUBLIC_URL=https://your-ngrok-subdomain.ngrok.io
PUBLIC_URL=http://localhost:4000

# -------------------------------------
# -- DATABASE & CACHE --
# -------------------------------------
# Connection string for your PostgreSQL database. This default works with the provided docker-compose.yml.
DATABASE_URL="postgresql://postgres:postgres@localhost:5432/ci_sight"

# Set to true to enable Redis for background job processing.
USE_REDIS=true

# Connection string for your Redis instance. This default works with the provided docker-compose.yml.
REDIS_URL="redis://localhost:6379"

# -------------------------------------
# -- SECURITY & SECRETS --
# -------------------------------------
# A long, random, and secret string for signing session JWTs.
# Generate one with: openssl rand -base64 32
SESSION_JWT_SECRET="a_very_strong_and_random_secret_for_jwt_sessions_go_here"

# A 32-byte base64 encoded key for encrypting sensitive data like user access tokens.
# Generate one with: openssl rand -base64 32
TOKEN_ENCRYPTION_KEY="a_strong_32_byte_base64_encryption_key_goes_here_12345"

# A secret string you create to secure your GitHub webhooks.
# This should match the secret you enter in your GitHub repository's webhook settings.
GITHUB_WEBHOOK_SECRET="your_super_secret_github_webhook_string"

# -------------------------------------
# -- GITHUB OAUTH INTEGRATION --
# -------------------------------------
# The Client ID from your GitHub OAuth App settings.
GITHUB_OAUTH_CLIENT_ID="your_github_oauth_app_client_id"

# The Client Secret from your GitHub OAuth App settings.
GITHUB_OAUTH_CLIENT_SECRET="your_github_oauth_app_client_secret_string"

# -------------------------------------
# -- AI / ML SERVICES --
# -------------------------------------
# The API endpoint for your local Ollama instance.
OLLAMA_API_URL="http://localhost:11434/api/generate"

# The model to use with Ollama for generating solutions.
OLLAMA_MODEL="codellama:7b"

# -------------------------------------
# -- DEVELOPMENT & LOCAL SETUP --
# -------------------------------------
# If true, the server will attempt to seed the database with initial data on startup.
DEV_SEED=true

# [IMPORTANT FOR LOCAL DEV] Path to the Python executable in your virtual environment.
# This ensures Node.js uses the correct Python with all ML packages installed.
# Create the venv with: python3 -m venv ml/venv
# Activate with: source ml/venv/bin/activate
# Install packages with: pip install -r ml/requirements.txt
PYTHON_EXECUTABLE=./ml/venv/bin/python