name: CI Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    env:
      DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/ci_sight_test"
      REDIS_URL: "redis://localhost:6379"
      NODE_ENV: test

    services:
      postgres:
        image: pgvector/pgvector:pg16
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ci_sight_test

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies with npm ci
        run: |
          npm ci
          pip install -r ml/requirements.txt
          npm ci --prefix client
          npm ci --prefix server

      - name: Scan for vulnerabilities
        run: |
          npm audit --prefix client --audit-level=high
          npm audit --prefix server --audit-level=high

      - name: Apply database migrations
        run: npx prisma migrate deploy --schema=./server/prisma/schema.prisma

      - name: Build client and server
        run: |
          npm run build --prefix client
          npm run build --prefix server

      - name: Run server tests
        env:
          # --- Non-Sensitive Configuration for Tests ---
          FRONTEND_URL: "http://localhost:5173"
          PUBLIC_URL: "http://localhost:4000"

          # --- Secrets loaded from GitHub with valid names ---
          SESSION_JWT_SECRET: ${{ secrets.SESSION_JWT_SECRET }}
          TOKEN_ENCRYPTION_KEY: ${{ secrets.TOKEN_ENCRYPTION_KEY }}

          # --- Mapping secrets to the environment variables your application expects ---
          # The left side is the ENV_VAR_NAME, the right side is the SECRET_NAME
          GITHUB_WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET }}
          GITHUB_OAUTH_CLIENT_ID: ${{ secrets.OAUTH_CLIENT_ID }}
          GITHUB_OAUTH_CLIENT_SECRET: ${{ secrets.OAUTH_CLIENT_SECRET }}
        run: npm test --prefix server